<?php

/**
 * @file
 * Allows provisioning Aegir platforms from a Git repository.
 */

/**
 * Implements hook_form_alter().
 */
function hosting_platform_git_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'platform_node_form') {
    $form['git'] = array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
      '#title' => t('Deploy from Git'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 0,
    );

    $form['git']['repo_url'] = array(
      '#type' => 'textfield',
      '#title' => 'Repository URL',
      '#description' => t('You may deploy new platform from a Git repository. This functionality cannot be combined with a Makefile. The full URL that you would pass to <em>git clone</em>. Example: git@github.com:username/project.git or https://github.com/username/project.git. Note that this repository must be accessible by the Aegir user.'),
    );

    $form['git']['repo_branch'] = array(
      '#type' => 'textfield',
      '#title' => 'Branch or tag name',
      '#description' => t('If a branch or tag name is not supplied, the platform will be deployed from <em>master</em>. This must match the Git branch or tag name exactly.')
    );

    $form['#validate'][] = 'hosting_platform_git_node_form_validate';
    $form['#submit'][] = 'hosting_platform_git_node_form_submit';
  }
}

/**
 * Validation callback for platform node form.
 */
function hosting_platform_git_node_form_validate($form, &$form_state) {
  if (!empty($form_state['values']['git']['repo_url']) && !empty($form_state['values']['makefile'])) {
    form_set_error('makefile', t('Git deployment and Makefile deployment cannot be combined'));
  }
}


/**
 * Implements hook_nodeapi().
 */
function hosting_platform_git_nodeapi(&$node, $op) {
  if ($node->type == 'platform') {
    switch ($op) {
      case 'insert':
      case 'update':
        $info = new stdClass();
        $info->nid = $node->nid;
        $info->git_repo_url = !empty($node->git['repo_url']) ? $node->git['repo_url'] : 'NOOP';
        $info->git_repo_branch = !empty($node->git['repo_branch']) ? $node->git['repo_branch'] : 'master';
        if ($node->is_new) {
          drupal_write_record('hosting_platform_git', $info);
        }
        else {
          drupal_write_record('hosting_platform_git', $info, 'nid');
        }
        break;
      case 'load':
        if ($result = db_fetch_object(db_query('SELECT * FROM {hosting_platform_git} WHERE nid = %d', $node->nid))) {
          $node->git = array();
          $node->git['repo_url'] = $result->git_repo_url;
          $node->git['repo_branch'] = $result->git_repo_branch;
        }
        break;
      case 'view':
        if (isset($node->git['repo_url']) && $node->git['repo_url'] != 'NOOP') {
          $node->content['info']['git_repo_url'] = array(
            '#type' => 'item',
            '#title' => t('Repository URL'),
            '#weight' => 100,
            '#value' => check_plain($node->git['repo_url']),
          );
          $node->content['info']['git_repo_branch'] = array(
            '#type' => 'item',
            '#title' => t('Repository branch/tag'),
            '#weight' => 100,
            '#value' => check_plain($node->git['repo_branch']),
          );
        }
        break;
    }
  }
}
