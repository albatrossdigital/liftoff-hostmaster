<?php

/**
 * Implementation of hook_hosting_queues().
 *
 * Return a list of queues that this module needs to manage.
 */
function hosting_task_gc_hosting_queues() {
  $result = hosting_task_gc_count_sites();
  $row = db_fetch_object($result);
  $count = $row->num_sites;
  $result2 = hosting_task_gc_count_platforms();
  $row2 = db_fetch_object($result2);
  $count2 = $row2->num_platforms;
  $result3 = hosting_task_gc_count_instances();
  $row3 = db_fetch_object($result3);
  $count3 = $row3->num_instances;
  $queue['task_gc'] = array(
    'name' => t('Task GC'),
    'description' => t('Process the garbage collection of task logs.'),
    'type' => 'batch',  # run queue sequentially. always with the same parameters.
    'frequency' => strtotime("1 hour", 0),
    'min_threads' => 6,
    'max_threads' => 12,
    'threshold' => 100,
    'total_items' => $count + $count2 + $count3,
    'singular' => t('site/platform/instance'),
    'plural' => t('sites/platforms/instances'),
  );
  return $queue;
}

/**
 * The main queue callback for the backups.
 */
function hosting_task_gc_queue($count) {
  // Delete deleted nodes and platforms.
  global $user;
  $old_user = $user;
  $user = user_load(1);
  $result = hosting_task_gc_list_sites();
  while ($site = db_fetch_object($result)) {
    node_delete($site->nid);
  }
  $result2 = hosting_task_gc_list_platforms();
  while ($platform = db_fetch_object($result2)) {
    node_delete($platform->nid);
  }
  $user = $old_user;

  // Delete orphaned task logs.
  $query = "SELECT DISTINCT h.vid FROM {hosting_task_log} h LEFT OUTER JOIN {node_revisions} n ON h.vid = n.vid WHERE n.vid IS NULL LIMIT 100";
  $result = db_query($query);
  while ($revision = db_fetch_object($result)) {
    $query = "DELETE FROM {hosting_task_log} WHERE vid = %d";
    db_query($query, $revision->vid);
    $num = db_affected_rows();
    watchdog('hosting_task_gc', 'Deleted @num orphaned task log entries with vid @vid.', array('@num' => $num, '@vid' => $revision->vid));
  }

  // Delete orphaned package instances.
  $result = hosting_task_gc_list_instances();
  while ($instance = db_fetch_object($result)) {
    $query = "DELETE FROM {hosting_package_instance} WHERE iid = %d";
    db_query($query, $instance->iid);
    $num = db_affected_rows();
    watchdog('hosting_task_gc', 'Deleted @num orphaned package instances.', array('@num' => $num));
  }
}

function hosting_task_gc_list_sites() {
  $query = "SELECT DISTINCT s.nid FROM {hosting_site} s WHERE s.status = %d LIMIT 5";
  return db_query($query, HOSTING_SITE_DELETED);
}

function hosting_task_gc_list_platforms() {
  $query = "SELECT DISTINCT p.nid FROM {hosting_platform} p WHERE p.status = %d LIMIT 5";
  return db_query($query, HOSTING_PLATFORM_DELETED);
}

function hosting_task_gc_list_instances() {
  $query = "SELECT iid FROM {hosting_package_instance} WHERE rid NOT IN (SELECT nid from {hosting_platform}) AND rid NOT IN (SELECT nid from {hosting_site}) AND rid NOT IN (SELECT iid FROM {hosting_package_instance}) LIMIT 10000";
  return db_query($query);
}

function hosting_task_gc_count_sites() {
  $query = "SELECT COUNT(DISTINCT s.nid) AS num_sites FROM {hosting_site} s WHERE s.status = %d";
  return db_query($query, HOSTING_SITE_DELETED);
}

function hosting_task_gc_count_platforms() {
  $query = "SELECT COUNT(DISTINCT p.nid) AS num_platforms FROM {hosting_platform} p WHERE p.status = %d";
  return db_query($query, HOSTING_PLATFORM_DELETED);
}

function hosting_task_gc_count_instances() {
  $query = "SELECT COUNT(DISTINCT iid) AS num_instances FROM {hosting_package_instance} WHERE rid NOT IN (SELECT nid from {hosting_platform}) AND rid NOT IN (SELECT nid from {hosting_site}) AND rid NOT IN (SELECT iid FROM {hosting_package_instance})";
  return db_query($query);
}
